name: Deploy Hetzner Homepage Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - name: Build application
        run: |
          go mod tidy
          go build hetzner.go

          export WG_DO_HOME_PORT=$(echo ${{ secrets.ORG_WG_DO_HOME_PORT }} | base64 -d)
          export WG_DO_PRIVATE_KEY=$(echo ${{ secrets.ORG_WG_DO_PRIVATE_KEY }} | base64 -d)
          export WG_HOME_PUBLIC_KEY=$(echo ${{ secrets.ORG_WG_HOME_PUBLIC_KEY }} | base64 -d)
          export WG_DO_HOME_PRESHAREDKEY=$(echo ${{ secrets.ORG_WG_DO_HOME_PRESHAREDKEY }} | base64 -d)
          sed -i -e "s@{{WG_DO_HOME_PORT}}@$WG_DO_HOME_PORT@" scripts/raw_ubuntu_userdata.sh
          sed -i -e "s@{{WG_DO_PRIVATE_KEY}}@$WG_DO_PRIVATE_KEY@" scripts/raw_ubuntu_userdata.sh
          sed -i -e "s@{{WG_HOME_PUBLIC_KEY}}@$WG_HOME_PUBLIC_KEY@" scripts/raw_ubuntu_userdata.sh
          sed -i -e "s@{{WG_DO_HOME_PRESHAREDKEY}}@$WG_DO_HOME_PRESHAREDKEY@" scripts/raw_ubuntu_userdata.sh

          export CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN=$(echo ${{ secrets.ORG_DIGITALOCEAN_DNS_TOKEN }} | base64 -d)
          export CTX_DIGITALOCEAN_FIREWALL=$(echo ${{ secrets.ORG_DIGITALOCEAN_FIREWALL }} | base64 -d)
          export HETZNER_API_TOKEN=$(echo ${{ secrets.ORG_HETZNER_CLOUD_API_TOKEN }} | base64 -d)
          export HETZNER_VAULT_VOLUME_ID=$(echo ${{ secrets.ORG_HETZNER_VAULT_VOLUME_ID }} | base64 -d)
          export HETZNER_FIREWALL=$(echo ${{ secrets.ORG_HETZNER_HOME_FIREWALL }} | base64 -d)
          export SERVER_DEPLOY_CACERT_B64=${{ secrets.ORG_SERVER_DEPLOY_CACERT }}
          export SERVER_DEPLOY_SECRET_B64=${{ secrets.ORG_SERVER_DEPLOY_SECRET }}
          export SERVER_DEPLOY_PUBLIC_B64=${{ secrets.ORG_SERVER_DEPLOY_PUBLIC }}
          export SYNCTHING_CONFIG_B64=${{ secrets.ORG_CLOUD_SYNCTHING_CONFIG }}
          export SYNCTHING_KEY=$(echo ${{ secrets.ORG_CLOUD_SYNCTHING_KEY }} | base64 -d)
          export SYNCTHING_CERT=$(echo ${{ secrets.ORG_CLOUD_SYNCTHING_CERT }} | base64 -d)
          export TITAN_PUBLIC_KEY=$(echo ${{ secrets.ORG_TITAN_PUBLIC_KEY }} | base64 -d)

          envsubst '$SERVER_DEPLOY_CACERT_B64, $SERVER_DEPLOY_SECRET_B64, $SERVER_DEPLOY_PUBLIC_B64, $TITAN_PUBLIC_KEY, $SYNCTHING_CONFIG_B64, $SYNCTHING_KEY, $SYNCTHING_CERT' < scripts/raw_ubuntu_userdata.sh >ubuntu_userdata.sh

          export BUILD_HOST=$(echo ${{ secrets.ORG_BUILD_HOST }} | base64 -d)
          export MASTER_HOST=$(echo ${{ secrets.ORG_MASTER_HOST }} | base64 -d)
          export SLAVE_HOST=$(echo ${{ secrets.ORG_SLAVE_HOST }} | base64 -d)
          export SERVERS="ubuntu@$MASTER_HOST ubuntu@$SLAVE_HOST ackersond@$BUILD_HOST"

          mkdir ~/.ssh # for new RSA key created in next step
          ./hetzner -fn=createServer -tag=homepage

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          source /tmp/new_hetzner_server_params

          ./hetzner -fn=firewallSSH -tag=homepage -ip=$public_ip_address -serverID=$NEW_SERVER_ID

          sudo apt-get -y install nmap
          while [ `nmap "$NEW_SERVER_IPV4" -PN -p ssh | egrep 'open|closed|filtered' | awk '{print $2}'` != "open" ]
          do
            echo "ssh not available..."
            ./hetzner -fn=checkServer -serverID=$NEW_SERVER_ID
            sleep 3
          done

          ssh -o StrictHostKeyChecking=no root@$NEW_SERVER_IPV4 "\
            cloud-init status --wait > /dev/null 2>&1
            [ $? -ne 0 ] && echo 'Cloud-init failed' && exit 1
            echo 'Cloud-init succeeded at ' `date -R`  > ~/post-cloud-init.log"

          echo "${{ secrets.ORG_TLS_ACKDE_CRT }}" | base64 -d | tee ackde.crt >/dev/null
          echo "${{ secrets.ORG_TLS_ACKDE_KEY }}" | base64 -d | tee ackde.key >/dev/null
          echo "${{ secrets.ORG_TLS_HAUSM_CRT }}" | base64 -d | tee hausm.crt >/dev/null
          echo "${{ secrets.ORG_TLS_HAUSM_KEY }}" | base64 -d | tee hausm.key >/dev/null
          scp *.crt root@$NEW_SERVER_IPV4:/root/traefik/certs/
          scp *.key root@$NEW_SERVER_IPV4:/root/traefik/keys/
          scp scripts/dynamic_conf.yml root@$NEW_SERVER_IPV4:/root/traefik/
          scp /home/runner/.ssh/id_rsa root@$NEW_SERVER_IPV4:/root/.ssh/

          # deploy traefik to droplet
          ssh root@$NEW_SERVER_IPV4 "\
            docker run -d --name ipv6nat --cap-drop ALL --cap-add NET_ADMIN --cap-add NET_RAW --network host --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock:ro robbertkl/ipv6nat && \
            docker run -d --restart=always \
              -v /var/run/docker.sock:/var/run/docker.sock:ro \
              -v /root/traefik/logs:/var/log/traefik/ \
              -v /root/traefik/certs:/certs/ \
              -v /root/traefik/keys:/keys/ \
              -v /root/traefik/dynamic_conf.yml:/dynamic_conf.yml \
              --label='traefik.enable=true' \
              --label='traefik.http.middlewares.api_auth.basicauth.users=$(echo ${{ secrets.ORG_CLOUD_SYNCTHING_BASIC_AUTH_USER }} | base64 -d):$(echo ${{ secrets.ORG_CLOUD_SYNCTHING_BASIC_AUTH_PASS }} | base64 -d)' \
              --label='traefik.http.routers.api.entrypoints=web,secure' \
              --label='traefik.http.routers.api.middlewares=http-ratelimit@file,secHeaders@file,api_auth' \
              --label='traefik.http.routers.api.rule=Host(\`monitor.ackerson.de\`)' \
              --label='traefik.http.routers.api.service=api@internal' \
              --label='traefik.http.routers.api.tls.domains=monitor.ackerson.de' \
              --label='traefik.http.routers.https-redirect.rule=HostRegexp(\`{any:.*}\`)' \
              --label='traefik.http.routers.https-redirect.middlewares=https-redirect@docker' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.scheme=https' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.permanent=true' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.port=443' \
              -p 80:80 -p 443:443 --name traefik traefik:2.8 \
              --accesslog.filepath=/var/log/traefik/access.log \
              --log.filepath=/var/log/traefik/traefik.log --log.level=WARN \
              --api.dashboard=false --providers.docker.exposedByDefault=false --providers.file.filename=/dynamic_conf.yml \
              --entrypoints.web.address=:80 --entrypoints.secure.address=:443 \
              --entryPoints.web.forwardedHeaders.trustedIPs=172.17.0.1/24,fd00::/80 \
              --entryPoints.secure.forwardedHeaders.trustedIPs=172.17.0.1/24,fd00::/80 \
            docker run -d --restart=always \
              -v /root/syncthing:/var/syncthing --hostname=$(echo ${{ secrets.ORG_CLOUD_SYNCTHING_HOSTNAME }} | base64 -d) \
              --label='traefik.enable=true' \
              --label='traefik.http.routers.syncthing.tls.certResolver=letsencrypt' \
              --label='traefik.http.routers.syncthing.tls.domains=$(echo ${{ secrets.ORG_CLOUD_SYNCTHING_HOSTNAME }} | base64 -d)' \
              --label='traefik.http.routers.syncthing.rule=Host(\`$(echo ${{ secrets.ORG_CLOUD_SYNCTHING_HOSTNAME }} | base64 -d)\`)' \
              --label='traefik.http.routers.syncthing.middlewares=http-ratelimit@file,secHeaders@file,api_auth' \
              --label='traefik.http.routers.syncthing.service=syncthing-svc' \
              --label='traefik.http.services.syncthing-svc.loadbalancer.server.port=8384' \
              -p 8384:8384 -p 22000:22000/tcp -p 22000:22000/udp --name syncthing syncthing/syncthing:latest"

          # New server is up and running - prepare the old one for death
          # retrieve current deployment priv key
          echo "${{ secrets.HETZNER_SSH_PRIVKEY }}" | base64 -d | tee ~/.ssh/id_rsa_old
          chmod 400 ~/.ssh/id_rsa_old

          export SLACK_NOTIFY_TOKEN=$(echo ${{ secrets.ORG_SLACK_NOTIFICATIONS_TOKEN }} | base64 -d)
          # update Vault CIDRs with new addresses
          curl -s -X POST -d token=$SLACK_NOTIFY_TOKEN -d channel=C33QYV3PW \
            -d text="vfa update $NEW_SERVER_IPV6,$NEW_SERVER_IPV4" https://slack.com/api/chat.postMessage

          # Use existing server to update new firewall rules for home network & vault instance
          envsubst '${MASTER_HOST} ${SLAVE_HOST} ${BUILD_HOST} ${NEW_SERVER_IPV6} ${OLD_SERVER_IPV6}' < scripts/firewall_rules.sh > fw_rules.sh
          if scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa_old fw_rules.sh root@ackerson.de:/root/ ; then
            if ! ssh -i ~/.ssh/id_rsa_old root@ackerson.de /bin/bash /root/fw_rules.sh ; then
              curl -s -o /dev/null -X POST -d token=$SLACK_NOTIFY_TOKEN -d channel=C092UE0H4 \
                -d text="Failed to update firewall rules: ${OLD_SERVER_IPV6} => ${NEW_SERVER_IPV6}" \
                https://slack.com/api/chat.postMessage
            fi
          else
            curl -s -o /dev/null -X POST -d token=$SLACK_NOTIFY_TOKEN -d channel=C092UE0H4 \
              -d text="Unable to reach ackerson.de => Perhaps this is first run?" https://slack.com/api/chat.postMessage
          fi

          # update PRIVKEY to new one for subsequent deployments
          # grab github.py from pi-ops repo
          curl -o scripts/github.py https://raw.githubusercontent.com/ackersonde/pi-ops/master/scripts/secrets/github.py
          curl -o scripts/requirements.txt https://raw.githubusercontent.com/ackersonde/pi-ops/master/scripts/secrets/requirements.txt

          export GITHUB_INSTALL_ID=$(echo ${{ secrets.ORG_GITHUB_INSTALL_ID }} | base64 -d)
          export GITHUB_APP_CLIENT_ID=$(echo ${{ secrets.ORG_GITHUB_APP_CLIENT_ID }} | base64 -d)
          export GITHUB_SECRETS_PK_PEM=$(echo ${{ secrets.ORG_GITHUB_SECRETS_PK_PEM }} | base64 -d)
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          python scripts/update_github_secret.py --name HETZNER_SSH_PRIVKEY --storeB64 True -f ~/.ssh/id_rsa

          # perform final cleanup
          ./hetzner -fn=cleanupDeploy -serverID=$NEW_SERVER_ID -tag=homepage # if serverID provided, DNS is UPDATED!

          export GITHUB_USERNAME=$(echo ${{ secrets.ORG_GITHUB_PERSONAL_ACCESS_USERNAME }} | base64 -d)
          export GITHUB_TOKEN=$(echo ${{ secrets.ORG_GITHUB_PERSONAL_ACCESS_TOKEN }} | base64 -d)
          # Redeploy homepage, bender, telegram-bot to new server
          curl -Ss -X POST -u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/ackerson.de-go/actions/workflows/build.yml/dispatches \
            -d '{"ref":"hetzner","inputs":{"ca_pub_fingerprint":"$NEW_SERVER_ID"}}'
          curl -Ss -X POST -u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/bender-slackbot/actions/workflows/build.yml/dispatches \
            -d '{"ref":"hetzner"}'
          curl -Ss -X POST -u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/telegram-bot/actions/workflows/build.yml/dispatches \
            -d '{"ref":"hetzner"}'
          curl -Ss -X POST -u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/hsm-planb.de/actions/workflows/build.yml/dispatches \
            -d '{"ref":"hetzner"}'
          # WARNING: Hetzner only allows max *5* firewalls per server! With the default + the 4 deployment FWs above == 5
          # so you can't autodeploy addtl, new repos w/o refactoring the whole shebang
          # (e.g. only have one github-deploy FW which gets deleted after it's >10mins old?): end WARNING

          rm ubuntu_userdata.sh *.crt *.key ~/.ssh/* /tmp/new_hetzner_server_params

          curl -s -o /dev/null -X POST -d token=$SLACK_NOTIFY_TOKEN -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|$GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
